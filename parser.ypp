%{
    #include <iostream>
    #include "hw3_output.hpp"
    #include "Enums.hpp"
    #include "RelopAUX.hpp"
    #include "Exp_t.hpp"
    #include "Table.hpp"
    #include "BaseObj.hpp"
    #define castType(toCast) (*(static_cast<Type*>(toCast)))
    #define castID(toCast) (*(static_cast<IDtype*>(toCast)))
    #define castSymList(toCast) (*(static_cast<SymList*>(toCast)))
    #define castSymbol(toCast) (*(static_cast<Symbol*>(toCast)))
    #define castExp(toCast) (*(static_cast<Exp_t*>(toCast)))
    #define castExpList(toCast) (*(static_cast<ExpList*>(toCast)))
    #define castNum(toCast) (*(static_cast<Num*>(toCast)))

    int yylex();
    // extern int yylineno; moved it to table.hpp
    void output::printProductionRule(int ruleno);
    void output::errorLex(int lineno);
    void output::errorSyn(int lineno);
    void yyerror(const char*);

    SymbolTable symbolTable = SymbolTable();

%}

%token VOID
%token INT
%nonassoc BYTE
%nonassoc B
%nonassoc BOOL
%left OR
%left AND
%right NOT
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc IF
%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc SWITCH
%nonassoc CASE
%nonassoc DEFAULT
%nonassoc COLON
%nonassoc SC
%nonassoc COMMA
%left LPAREN
%left RPAREN
%left LBRACE
%left RBRACE
%right ASSIGN
%left EQUALITY
%nonassoc RELOP
%left BINOP_PM
%left BINOP_MD
%token ID
%nonassoc NUM
%nonassoc STRING
%right ELSE

%%

Program:        Funcs                                                       {output::printProductionRule(1);}
;
Funcs:          /*epsilon*/                                                 {output::printProductionRule(2);}
                | FuncDecl Funcs                                            {output::printProductionRule(3);}
;
FuncDecl:       RetType ID LPAREN Formals RPAREN LBRACE
                                    {symbolTable.openFuncScope(castID($2), castSymList($4), castType($1));}
                                    Statements
                                    {symbolTable.closeCurrentScope();}
                                    RBRACE                                  {output::printProductionRule(4);}
;
RetType:        Type                                                        {$$ = $1; output::printProductionRule(5);}
                | VOID                                                      {$$ = new Type(E_void); output::printProductionRule(6);}
;
Formals:        /*epsilon*/                                                 {$$ = new SymList() ; output::printProductionRule(7);}
                | FormalsList                                               {$$ = $1 ; output::printProductionRule(8);}
;
FormalsList:    FormalDecl                                                  {output::printProductionRule(9); $$ = new SymList() ; castSymList($$).insert(castSymbol($1)); }
                |FormalDecl COMMA FormalsList                               {output::printProductionRule(10); $$ = $3 ; castSymList($$).insert(castSymbol($1)); }
;
FormalDecl:     Type ID                                                     {$$ = new Symbol(castID($2), castType($1)) ; output::printProductionRule(11);}
;
Statements:     Statement                                                   {output::printProductionRule(12);}
                |Statements Statement                                       {output::printProductionRule(13);}
;
Statement:      LBRACE Statements RBRACE                                    {output::printProductionRule(14);}
                | Type ID SC                                                {symbolTable.addSymbol(castType($1), castID($2)) ; output::printProductionRule(15);}
                | Type ID ASSIGN Exp SC                                     {symbolTable.addSymbol(castType($1), castID($2)); symbolTable.assign(castID($2), castExp($4)); output::printProductionRule(16);}
                | ID ASSIGN Exp SC                                          {symbolTable.getExpByID(castID($1)) = castExp($3) ; output::printProductionRule(17);}
                | Call SC                                                   {output::printProductionRule(18);}
                | RETURN SC                                                 {symbolTable.checkReturnType(Exp_t(Type(E_void))) ; output::printProductionRule(19);}
                | RETURN Exp SC                                             {symbolTable.checkReturnType(castExp($2)) ; output::printProductionRule(20);}
                | IF LPAREN Exp RPAREN
                                    { if(castExp($3).t == E_bool) {symbolTable.openNewScope();output::printProductionRule(21);} else {  output::printProductionRule(21); output::errorMismatch(lineno); exit(41);}}
                                    Statement
                                    {symbolTable.closeCurrentScope();}
                                                                            {output::printProductionRule(21);}
                | IF LPAREN Exp RPAREN
                                    {if(castExp($3).t == E_bool) {symbolTable.openNewScope();} else { output::errorMismatch(lineno); exit(1);}}
                                    Statement
                                    {symbolTable.closeCurrentScope();}
                                    ELSE
                                    {symbolTable.openNewScope();}
                                    Statement
                                    {symbolTable.closeCurrentScope();}
                                                                            {output::printProductionRule(22);}
                | WHILE LPAREN Exp RPAREN
                                     {if(castExp($3).t == E_bool) {symbolTable.openLoopScope();} else { output::errorMismatch(lineno); exit(1);}}
                                     Statement
                                     {symbolTable.closeCurrentScope();}
                                                                            {output::printProductionRule(23);}
                | BREAK SC                                                  {symbolTable.triggerBreak(); output::printProductionRule(24);}
                | CONTINUE SC                                               {symbolTable.triggerContinue(); output::printProductionRule(25);}
                | SWITCH LPAREN Exp RPAREN
                            {symbolTable.openSwitchScope(castExp($3));}
                            LBRACE CaseList RBRACE
                            {symbolTable.closeCurrentScope();}
                                                                            {output::printProductionRule(26);}
;
Call :          ID LPAREN ExpList RPAREN                                    {$$ = new Exp_t(symbolTable.callFunc(castID($1), castExpList($3))) ; output::printProductionRule(27);}
                | ID LPAREN RPAREN                                          {$$ = new Exp_t(symbolTable.callFunc(castID($1), ExpList())) ; output::printProductionRule(28);}
;
ExpList:        Exp                                                         {$$ = new ExpList(); castExpList($$).insert(castExp($1)); output::printProductionRule(29);}
                | Exp COMMA ExpList                                         {$$ = $3; castExpList($$).insert(castExp($1)); output::printProductionRule(30);}
;
Type :          INT                                                         {$$ = new Type(E_int) ;output::printProductionRule(31);}
                | BYTE                                                      {$$ = new Type(E_byte) ;output::printProductionRule(32);}
                | BOOL                                                      {$$ = new Type(E_bool) ;output::printProductionRule(33);}
;
Exp:            LPAREN Exp RPAREN                                           {$$ = $1; output::printProductionRule(34);}
                | Exp BINOP_MD Exp                                          {$$ = new Exp_t(Type(castExp($1).getDualType(castExp($3)))); output::printProductionRule(35);}
                | Exp BINOP_PM Exp                                          {$$ = new Exp_t(Type(castExp($1).getDualType(castExp($3)))); output::printProductionRule(35);}
                | ID                                                        {$$ = new Exp_t(symbolTable.getExpByID(castID($1))) ; output::printProductionRule(36);}
                | Call                                                      {$$ = $1 ; output::printProductionRule(37);}
                | NUM                                                       {$$ = new Exp_t(Type(E_int)); output::printProductionRule(38);}
                | NUM B                                                     {if(castNum($1).val > 255) {output::errorByteTooLarge(yylineno, castNum($1).val); exit(1); } $$ = new Exp_t(Type(E_byte)); output::printProductionRule(39);}
                | STRING                                                    {$$ = new Exp_t(Type(E_string)); ; output::printProductionRule(40);}
                | TRUE                                                      {$$ = new Exp_t(Type(E_bool)); output::printProductionRule(41);}
                | FALSE                                                     {$$ = new Exp_t(Type(E_bool)); output::printProductionRule(42);}
                | Exp AND Exp                                               {$$ = new Exp_t(Type(E_bool)); output::printProductionRule(44);}
                | Exp OR Exp                                                {$$ = new Exp_t(Type(E_bool)); output::printProductionRule(45);}
                | NOT Exp                                                   {$$ = new Exp_t(Type(E_bool)); output::printProductionRule(43);}
                | Exp EQUALITY Exp                                          {
                                                                                    if(!castExp($1).isNumerical() || !castExp($3).isNumerical()){
                                                                                        exit(12);
                                                                                    }
                                                                                    $$ = new Exp_t(Type(E_bool));
                                                                                    delete $1;
                                                                                    delete $3;
                                                                            }
                | Exp RELOP Exp                                             {
                                                                                if(!castExp($1).isNumerical() || !castExp($3).isNumerical()){
                                                                                    exit(12);
                                                                                }
                                                                                $$ = new Exp_t(Type(E_bool));
                                                                                delete $1;
                                                                                delete $3;
                                                                            };
;
CaseList:       CaseDecl CaseList                                           {output::printProductionRule(48);}
                | CaseDecl                                                  {output::printProductionRule(49);}
                | DEFAULT COLON Statements                                  {output::printProductionRule(50);}
;
CaseDecl:       CASE NUM COLON  {symbolTable.triggerCase();}
                            Statements                                      {output::printProductionRule(51);}
;

%%

void yyerror(const char* e){
    cout << e << endl;
    output::errorSyn(yylineno);
    exit(0);
}
int main(){
    //yydebug = 1;

    output::init();
    int res = yyparse();
    output::close();

    return res;
}