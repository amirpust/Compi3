%{
    #include <iostream>
    #include "hw3_output.hpp"
    #include "Enums.hpp"
    #include "RelopAUX.hpp"
    #include "Exp_t.hpp"
    #include "Table.hpp"
    #include "ObjectsPool.hpp"


    int yylex();
    // extern int yylineno; moved it to table.hpp
    void output::printProductionRule(int ruleno);
    void output::errorLex(int lineno);
    void output::errorSyn(int lineno);
    void yyerror(const char*);

    SymbolTable symbolTable = SymbolTable();
%}

%token  <typeVal> VOID
%token  <typeVal> INT
%nonassoc <typeVal> BYTE
%nonassoc <typeVal> B
%nonassoc <typeVal> BOOL
%left OR
%left AND
%right NOT
%nonassoc <boolVal> TRUE
%nonassoc <boolVal> FALSE
%nonassoc RETURN
%nonassoc IF
%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc SWITCH
%nonassoc CASE
%nonassoc DEFAULT
%nonassoc COLON
%nonassoc SC
%nonassoc COMMA
%left LPAREN
%left RPAREN
%left LBRACE
%left RBRACE
%right ASSIGN
%left EQUALITY
%nonassoc <relopAUX> RELOP
%left <intVal> BINOP_PM
%left <boolVal> BINOP_MD
%token <idVal> ID
%nonassoc <intVal> NUM
%nonassoc <stringVal> STRING
%right ELSE

%type<typeVal> RetType
%type<expVal> Exp
%type<expVal> Call
%type<expList> ExpList
%type<typeVal> Type
%type<symbol> FormalDecl
%type<symList> FormalsList
%type<symList> Formals

%%

Program:        Funcs                                                       {output::printProductionRule(1);}
;
Funcs:          /*epsilon*/                                                 {output::printProductionRule(2);}
                | FuncDecl Funcs                                            {output::printProductionRule(3);}
;
FuncDecl:       RetType ID LPAREN Formals RPAREN LBRACE
                                    {symbolTable.openFuncScope($2, $4, $1);}
                                    Statements
                                    {symbolTable.closeCurrentScope();}
                                    RBRACE                                  {output::printProductionRule(4);}
;
RetType:        Type                                                        {$$ = $1; output::printProductionRule(5);}
                | VOID                                                      {$$ = $1; output::printProductionRule(6);}
;
Formals:        /*epsilon*/                                                 {$$ = SymList() ; output::printProductionRule(7);}
                | FormalsList                                               {$$ = SymList($1) ; output::printProductionRule(8);}
;
FormalsList:    FormalDecl                                                  {$$ = SymList() ; $$.push_back($1); output::printProductionRule(9);}
                |FormalDecl COMMA FormalsList                               {$$ = SymList($3) ; $$.push_back($1); output::printProductionRule(10);}
;
FormalDecl:     Type ID                                                     {$$ = Symbol($2, $1) ; output::printProductionRule(11);}
;
Statements:     Statement                                                   {output::printProductionRule(12);}
                |Statements Statement                                       {output::printProductionRule(13);}
;
Statement:      LBRACE Statements RBRACE                                    {output::printProductionRule(14);}
                | Type ID SC                                                {symbolTable.addSymbol($1, $2) ; output::printProductionRule(15);}
                | Type ID ASSIGN Exp SC                                     {symbolTable.addSymbol($1, $2); symbolTable.assign($2, $4); output::printProductionRule(16);}
                | ID ASSIGN Exp SC                                          {symbolTable.getExpByID($1) = $3 ; output::printProductionRule(17);}
                | Call SC                                                   {output::printProductionRule(18);}
                | RETURN SC                                                 {symbolTable.checkReturnType(Exp_t(E_void)) ; output::printProductionRule(19);}
                | RETURN Exp SC                                             {symbolTable.checkReturnType($2) ; output::printProductionRule(20);}
                | IF LPAREN Exp RPAREN
                                    {cout << $3.t << endl; if($3.t == E_bool) {symbolTable.openNewScope();} else {  output::printProductionRule(21); output::errorMismatch(lineno); exit(41);}}
                                    Statement
                                    {symbolTable.closeCurrentScope();}
                                                                            {output::printProductionRule(21);}
                | IF LPAREN Exp RPAREN
                                    {if($3.t == E_bool) {symbolTable.openNewScope();} else { output::errorMismatch(lineno); exit(1);}}
                                    Statement
                                    {symbolTable.closeCurrentScope();}
                                    ELSE
                                    {symbolTable.openNewScope();}
                                    Statement
                                    {symbolTable.closeCurrentScope();}
                                                                            {output::printProductionRule(22);}
                | WHILE LPAREN Exp RPAREN
                                     {if($3.t == E_bool) {symbolTable.openLoopScope();} else { output::errorMismatch(lineno); exit(1);}}
                                     Statement
                                     {symbolTable.closeCurrentScope();}
                                                                            {output::printProductionRule(23);}
                | BREAK SC                                                  {symbolTable.triggerBreak(); output::printProductionRule(24);}
                | CONTINUE SC                                               {symbolTable.triggerContinue(); output::printProductionRule(25);}
                | SWITCH LPAREN Exp RPAREN
                            {symbolTable.openSwitchScope($3);}
                            LBRACE CaseList RBRACE
                            {symbolTable.closeCurrentScope();}
                                                                            {output::printProductionRule(26);}
;
Call :          ID LPAREN ExpList RPAREN                                    {$$ = symbolTable.callFunc($1, $3) ; output::printProductionRule(27);}
                | ID LPAREN RPAREN                                          {$$ = symbolTable.callFunc($1, ExpList()) ; output::printProductionRule(28);}
;
ExpList:        Exp                                                         {$$ = ExpList(); $$.push_back($1); output::printProductionRule(29);}
                | Exp COMMA ExpList                                         {$$ = ExpList($3); $$.push_back($1); output::printProductionRule(30);}
;
Type :          INT                                                         {$$ = $1 ;output::printProductionRule(31);}
                | BYTE                                                      {$$ = $1 ;output::printProductionRule(32);}
                | BOOL                                                      {$$ = $1 ;output::printProductionRule(33);}
;
Exp:            LPAREN Exp RPAREN                                           {$$ = Exp_t($2);  output::printProductionRule(34);}
                | Exp BINOP_MD Exp                                          {$$ = Exp_t($1); output::printProductionRule(35);}
                | Exp BINOP_PM Exp                                          {$$ = Exp_t($1); output::printProductionRule(35);}
                | ID                                                        {$$ = symbolTable.getExpByID($1) ; output::printProductionRule(36);}
                | Call                                                      {$$ = $1 ; output::printProductionRule(37);}
                | NUM                                                       {$$ = Exp_t(E_int); output::printProductionRule(38);}
                | NUM B                                                     {if($1 > 255) {output::errorByteTooLarge(yylineno, $1); exit(1); } $$ = Exp_t(E_byte); output::printProductionRule(39);}
                | STRING                                                    {$$ = Exp_t(E_string); output::printProductionRule(40);}
                | TRUE                                                      {$$ = Exp_t(E_bool); output::printProductionRule(41);}
                | FALSE                                                     {$$ = Exp_t(E_bool); output::printProductionRule(42);}
                | NOT Exp                                                   {$$ = Exp_t(E_bool); output::printProductionRule(43);}
                | Exp AND Exp                                               {$$ = Exp_t(E_bool); output::printProductionRule(44);}
                | Exp OR Exp                                                {$$ = Exp_t(E_bool); output::printProductionRule(45);}
                | Exp EQUALITY Exp                                          {$$ = Exp_t(E_bool); output::printProductionRule(46);}
                | Exp RELOP Exp                                             {$$ = Exp_t(E_bool) ; output::printProductionRule(46);}
;
CaseList:       CaseDecl CaseList                                           {output::printProductionRule(48);}
                | CaseDecl                                                  {output::printProductionRule(49);}
                | DEFAULT COLON Statements                                  {output::printProductionRule(50);}
;
CaseDecl:       CASE NUM COLON  {symbolTable.triggerCase();}
                            Statements                                      {output::printProductionRule(51);}
;

%%

void yyerror(const char* e){
    cout << e << endl;
    output::errorSyn(yylineno);
    exit(0);
}
int main(){
    //yydebug = 1;
    return yyparse();
}